package org.motechproject.mtraining.service.it;

import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.motechproject.mtraining.domain.Answer;
import org.motechproject.mtraining.domain.Chapter;
import org.motechproject.mtraining.domain.Course;
import org.motechproject.mtraining.domain.CourseUnitState;
import org.motechproject.mtraining.domain.Lesson;
import org.motechproject.mtraining.domain.Question;
import org.motechproject.mtraining.domain.Quiz;
import org.motechproject.mtraining.repository.ChapterDataService;
import org.motechproject.mtraining.repository.CourseDataService;
import org.motechproject.mtraining.repository.LessonDataService;
import org.motechproject.mtraining.repository.QuizDataService;
import org.motechproject.mtraining.service.MTrainingService;
import org.motechproject.testing.osgi.BasePaxIT;
import org.motechproject.testing.osgi.container.MotechNativeTestContainerFactory;
import org.ops4j.pax.exam.ExamFactory;
import org.ops4j.pax.exam.junit.PaxExam;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerSuite;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.util.Arrays.asList;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Verify that mTrainingService is present and functional.
 */
@RunWith(PaxExam.class)
@ExamReactorStrategy(PerSuite.class)
@ExamFactory(MotechNativeTestContainerFactory.class)
public class MTrainingServiceBundleIT extends BasePaxIT {

    @Inject
    private MTrainingService mTrainingService;

    @Inject
    private ChapterDataService chapterDataService;

    @Inject
    private CourseDataService courseDataService;

    @Inject
    private LessonDataService lessonDataService;

    @Inject
    private QuizDataService quizDataService;

    @Before
    public void setup() {
        getLogger().info("setup");
        lessonDataService.deleteAll();
        chapterDataService.deleteAll();
        courseDataService.deleteAll();
        quizDataService.deleteAll();
    }

    @Test
    public void testMTrainingServiceInstance() throws Exception {
        assertNotNull(mTrainingService);
    }

    @Test
    public void testCourseCreation() throws Exception {
        Course course = mTrainingService.createCourse(new Course("MyCourse", CourseUnitState.Active, "FooBar.com/ivr1", "Sample Course", getProperties1()));
        assertNotNull(course);

        List<Course> saved = mTrainingService.getCoursesByName("MyCourse");
        assertTrue(saved.size() > 0);
    }

    @Test
    public void testFullCourseCreation() throws Exception {
        Course testCourse = generateFullCourse("testFullCourseCreation");
        mTrainingService.createCourse(testCourse);
        List<Course> saved = mTrainingService.getCoursesByName("testFullCourseCreation");
        assertTrue(saved.size() > 0);
    }

    @Test
    public void testAutoGeneratedFields() throws Exception {
        Course testCourse = generateFullCourse("testAutoGeneratedFields");
        assertNull(testCourse.getModificationDate());
        assertNull(testCourse.getCreationDate());
        mTrainingService.createCourse(testCourse);

        List<Course> saved = mTrainingService.getCoursesByName("testAutoGeneratedFields");
        assertTrue(saved.size() > 0);
        Course returned = saved.get(0);
        assertNotNull(returned.getId());
        assertNotNull(returned.getCreationDate());
        assertNotNull(returned.getModificationDate());
    }

    @Test
    public void testCourseLookup() throws Exception {
        int courseCount = mTrainingService.getCoursesByName("testCourseLookup").size();
        mTrainingService.createCourse(generateFullCourse("testCourseLookup"));
        List<Course> lookup = mTrainingService.getCoursesByName("testCourseLookup");
        assertEquals(courseCount + 1, lookup.size());
    }

    @Test
    public void testCourseDeletion() throws Exception {
        Course toDelete = mTrainingService.createCourse(generateFullCourse("testCourseDeletion"));
        List<Course> lookup = mTrainingService.getCoursesByName("testCourseDeletion");
        assertEquals(1, lookup.size());

        mTrainingService.deleteCourse(toDelete.getId());
        lookup = mTrainingService.getCoursesByName("testCourseDeletion");
        assertEquals(0, lookup.size());
    }

    @Test
    public void testSubChapterDeletion() throws Exception {
        // build course
        Course toAdd = generateFullCourse("testSubChapterDeletion");
        List<Chapter> existing = toAdd.getChapters();
        existing.add(new Chapter("subChapterToDelete", CourseUnitState.Active, "RandomContentLink", "Chapter description", getProperties1()));
        toAdd.setChapters(existing);
        Course added = mTrainingService.createCourse(toAdd);
        Course lookup = mTrainingService.getCourseById(added.getId());
        assertNotNull(lookup);

        assertNotNull(lookup.getProperties());
        assertEquals(getProperties1(), lookup.getProperties());

        // verify chapter in course
        boolean found = false;
        long chapterId = -1;
        for (Chapter current : lookup.getChapters()) {
            if (current.getName() == "subChapterToDelete") {
                found = true;
                chapterId = current.getId();
            }
        }
        assertTrue(found);

        // delete chapter in course
        mTrainingService.deleteChapter(chapterId);

        // lookup course exists and verify that chapter was deleted
        lookup = mTrainingService.getCourseById(added.getId());
        assertNotNull(lookup);
        found = false;
        for (Chapter current : lookup.getChapters()) {
            if (current.getName() == "subChapterToDelete") {
                found = true;
                chapterId = current.getId();
            }
        }
        assertFalse(found);
    }

    @Test
    public void testCascadeSubUnitAccess() throws Exception {
        Course newCourse = mTrainingService.createCourse(generateFullCourse("testSubUnitCascadeDelete"));

        for(Chapter currentChapter : newCourse.getChapters()) {

            Quiz chapterQuiz = mTrainingService.getQuizForChapter(currentChapter.getId());
            if (chapterQuiz != null) {
                assertEquals(CourseUnitState.Active, chapterQuiz.getState());
            }

            for (Lesson currentLesson: currentChapter.getLessons()) {
                assertEquals(CourseUnitState.Active, currentLesson.getState());
            }
        }
        assertTrue(true);
    }

    @Test
    public void testSharedChapterCreation() throws Exception {
        Course firstCourse = mTrainingService.createCourse(generateFullCourse("testSharedChapter"));
        final long firstCourseId = firstCourse.getId();

        Course secondCourse = courseDataService.doInTransaction(new TransactionCallback<Course>() {
            @Override
            public Course doInTransaction(TransactionStatus transactionStatus) {
                Chapter sharedChapter = mTrainingService.getCourseById(firstCourseId).getChapters().get(0);
                return mTrainingService.createCourse(
                        new Course("secondCourse", CourseUnitState.Active, "RandomCourseIntro", null, null, asList(sharedChapter)));
            }
        });

        assertNotNull(secondCourse);

        firstCourse = mTrainingService.getCourseById(firstCourseId);
        assertEquals(firstCourse.getChapters().size(), secondCourse.getChapters().size());
    }

    @Test
    public void testCourseChapterUpdate() throws Exception {
        courseDataService.doInTransaction(new TransactionCallback<Course>() {
            @Override
            public Course doInTransaction(TransactionStatus transactionStatus) {
                Course firstCourse = mTrainingService.createCourse(generateFullCourse("testSharedChapter"));

                Chapter chapterToUpdate = firstCourse.getChapters().get(0);
                chapterToUpdate.setState(CourseUnitState.Inactive);
                Chapter updatedChapter = mTrainingService.updateChapter(chapterToUpdate);
                firstCourse = mTrainingService.getCourseById(firstCourse.getId());

                assertEquals(firstCourse.getChapters().get(0).getId(), updatedChapter.getId());
                assertEquals(firstCourse.getChapters().get(0).getState(), updatedChapter.getState());
                return firstCourse;
            }
        });
    }

    @Test
    public void testCourseUpdateStatus() throws Exception {
        Course firstCourse = mTrainingService.createCourse(generateFullCourse("testCourseUpdateStatus"));
        assertEquals(firstCourse.getState(), CourseUnitState.Active);

        firstCourse.setState(CourseUnitState.Inactive);
        Course updated = mTrainingService.updateCourse(firstCourse);
        assertEquals(CourseUnitState.Inactive, updated.getState());
    }

    @Test
    public void testCourseUpdateAddChapter() throws Exception {
       courseDataService.doInTransaction(new TransactionCallback<Course>() {
            @Override
            public Course doInTransaction(TransactionStatus transactionStatus) {
                Course firstCourse = courseDataService.detachedCopy(mTrainingService.createCourse(generateFullCourse("testCourseUpdateAddChapter")));
                assertEquals(2, firstCourse.getChapters().size());

                Chapter newChapter = new Chapter("newChapter", CourseUnitState.Active, "newChapterContent", null, null);
                firstCourse.getChapters().add(newChapter);

                Course updated = mTrainingService.updateCourse(firstCourse);
                assertEquals(3, updated.getChapters().size());
                return updated;
            }
        });
    }

    @Test
    public void testChapterCreation() throws Exception {
        Chapter newChapter = generateFullCourse("testChapterCreation").getChapters().get(0);
        newChapter.setName("MyFooBarChapter");
        newChapter = mTrainingService.createChapter(newChapter);

        assertNotNull(newChapter);
        assertTrue(mTrainingService.getCoursesByName("testChapterCreation").size() == 0);
        assertTrue(mTrainingService.getChaptersByName("MyFooBarChapter").size() > 0);
    }

    @Test
    public void testChapterUpdate() throws Exception {
        Chapter newChapter = generateFullCourse("testChapterUpdate").getChapters().get(0);
        newChapter.setName("testChapterUpdate-Chapter");
        newChapter = mTrainingService.createChapter(newChapter);

        assertNotNull(newChapter);
        assertEquals("testChapterUpdate-Chapter", newChapter.getName());
        newChapter.setName("testChapterUpdate-Chapter-Update");
        Chapter updated = mTrainingService.updateChapter(newChapter);
        assertEquals("testChapterUpdate-Chapter-Update", updated.getName());
    }

    @Test
    public void testChapterQuiz() throws Exception {
        Chapter newChapter = generateFullCourse("testChapterQuiz").getChapters().get(0);
        newChapter = mTrainingService.createChapter(newChapter);

        assertNotNull(newChapter);
        Quiz storedQuiz = mTrainingService.getQuizForChapter(newChapter.getId());
        assertNotNull(storedQuiz);
        assertEquals(storedQuiz.getName(), newChapter.getQuiz().getName());
        assertEquals(4, storedQuiz.getQuestions().size());

        for (Question question : storedQuiz.getQuestions()) {
            assertNotNull(question);
        }
    }

    @Test
    public void testFindByChapterProperties() {
        Map<String, String> props1 = getProperties1();
        props1.put("key_3", "value_3");
        Chapter chapter1 = new Chapter("chapter1", CourseUnitState.Active, "motech.com/chapter1Intro", "test_1", props1);

        Map<String, String> props2 = getProperties2();
        props2.put("key_3", "value_3");
        Chapter chapter2 = new Chapter("chapter2", CourseUnitState.Active, "motech.com/chapter2Intro", "test_2", props2);

        chapterDataService.create(chapter1);
        chapterDataService.create(chapter2);

        props1.remove("key_3");
        props2.remove("key_3");
        List<Chapter> list1 = mTrainingService.getChaptersByProperties(props1);
        List<Chapter> list2 = mTrainingService.getChaptersByProperties(props2);

        assertNotNull(list1);
        assertNotNull(list2);

        assertEquals(1, list1.size());
        assertEquals(1, list2.size());

        assertEquals("chapter1", list1.get(0).getName());
        assertEquals("chapter2", list2.get(0).getName());

        List<Chapter> list = mTrainingService.getChaptersByProperties(getProperties4());
        assertEquals(2, list.size());
    }

    @Test
    public void shouldReturnAllCHaptersWhenPropertiesAreNullOrEmpty() {
        Chapter chapter1 = new Chapter("chapter1", CourseUnitState.Active, "motech.com/chapter1Intro", "test_1", getProperties1());
        Chapter chapter2 = new Chapter("chapter2", CourseUnitState.Active, "motech.com/chapter2Intro", "test_2", getProperties2());
        Chapter chapter3 = new Chapter("chapter3", CourseUnitState.Active, "motech.com/chapter3Intro", "test_3", getProperties3());

        chapterDataService.create(chapter1);
        chapterDataService.create(chapter2);
        chapterDataService.create(chapter3);

        List<Chapter> list = mTrainingService.getChaptersByProperties(null);

        assertNotNull(list);
        assertEquals(3, list.size());

        list = mTrainingService.getChaptersByProperties(new HashMap<>());

        assertNotNull(list);
        assertEquals(3, list.size());
    }

    @Test
    public void testFindByCourseProperties() {
        Map<String, String> props1 = getProperties1();
        props1.put("key_3", "value_3");
        Course course1 = new Course("course1", CourseUnitState.Active, "motech.com/course1Intro", "test_1", props1);

        Map<String, String> props2 = getProperties2();
        props2.put("key_3", "value_3");
        Course course2 = new Course("course2", CourseUnitState.Active, "motech.com/course2Intro", "test_2", props2);

        courseDataService.create(course1);
        courseDataService.create(course2);

        props1.remove("key_3");
        props2.remove("key_3");
        List<Course> list1 = mTrainingService.getCoursesByProperties(props1);
        List<Course> list2 = mTrainingService.getCoursesByProperties(props2);

        assertNotNull(list1);
        assertNotNull(list2);

        assertEquals(1, list1.size());
        assertEquals(1, list2.size());

        assertEquals("course1", list1.get(0).getName());
        assertEquals("course2", list2.get(0).getName());

        List<Course> list = mTrainingService.getCoursesByProperties(getProperties4());
        assertEquals(2, list.size());
    }

    @Test
    public void testFindByLessonProperties() {
        Map<String, String> props1 = getProperties1();
        props1.put("key_3", "value_3");
        Lesson lesson1 = new Lesson("lesson1", CourseUnitState.Active, "motech.com/lesson1Intro", "test_1", props1);

        Map<String, String> props2 = getProperties2();
        props2.put("key_3", "value_3");
        Lesson lesson2 = new Lesson("lesson2", CourseUnitState.Active, "motech.com/lesson2Intro", "test_2", props2);

        lessonDataService.create(lesson1);
        lessonDataService.create(lesson2);

        props1.remove("key_3");
        props2.remove("key_3");
        List<Lesson> list1 = mTrainingService.getLessonsByProperties(props1);
        List<Lesson> list2 = mTrainingService.getLessonsByProperties(props2);

        assertNotNull(list1);
        assertNotNull(list2);

        assertEquals(1, list1.size());
        assertEquals(1, list2.size());

        assertEquals("lesson1", list1.get(0).getName());
        assertEquals("lesson2", list2.get(0).getName());

        List<Lesson> list = mTrainingService.getLessonsByProperties(getProperties4());
        assertEquals(2, list.size());
    }

    @Test
    public void testFindByQuizProperties() {
        Map<String, String> props1 = getProperties1();
        props1.put("key_3", "value_3");
        Quiz quiz1 = new Quiz("quiz1", CourseUnitState.Active, "motech.com/courseIntro1", "test_1", props1);

        Map<String, String> props2 = getProperties2();
        props2.put("key_3", "value_3");
        Quiz quiz2 = new Quiz("quiz2", CourseUnitState.Active, "motech.com/courseIntro2", "test_2", props2);

        quizDataService.create(quiz1);
        quizDataService.create(quiz2);

        props1.remove("key_3");
        props2.remove("key_3");
        List<Quiz> list1 = mTrainingService.getQuizzesByProperties(props1);
        List<Quiz> list2 = mTrainingService.getQuizzesByProperties(props2);

        assertNotNull(list1);
        assertNotNull(list2);

        assertEquals(1, list1.size());
        assertEquals(1, list2.size());

        assertEquals("quiz1", list1.get(0).getName());
        assertEquals("quiz2", list2.get(0).getName());

        List<Quiz> list = mTrainingService.getQuizzesByProperties(getProperties4());
        assertEquals(2, list.size());
    }


    @Test
    public void testGetUnusedChapters() {
        Course course = new Course("unused_chapters_course_1", CourseUnitState.Active, "content_1", "Description_1", getProperties3());
        chapterDataService.create(new Chapter("unused_chapters_chapter_1", CourseUnitState.Active, "content_1", "Description_1", getProperties2()));
        chapterDataService.create(new Chapter("unused_chapters_chapter_2", CourseUnitState.Active, "content_2", "Description_2", getProperties2()));

        List<Chapter> unusedChapters = chapterDataService.detachedCopyAll(mTrainingService.getUnusedChapters());
        assertNotNull(unusedChapters);
        assertEquals(2, unusedChapters.size());

        List<Chapter> chapters = new ArrayList<>();
        chapters.add(unusedChapters.get(0));
        course.setChapters(chapters);
        courseDataService.update(course);

        unusedChapters = chapterDataService.detachedCopyAll(mTrainingService.getUnusedChapters());
        assertNotNull(unusedChapters);
        assertEquals(1, unusedChapters.size());

        course = mTrainingService.getCourseById(course.getId());
        course.setChapters(new ArrayList<>());
        courseDataService.update(course);

        unusedChapters = chapterDataService.detachedCopyAll(mTrainingService.getUnusedChapters());
        assertNotNull(unusedChapters);
        assertEquals(2, unusedChapters.size());
    }

    @Test
    public void testGetUnusedLessons() {
        courseDataService.create(generateFullCourse("unused_lessons_"));
        lessonDataService.create(new Lesson("test_lesson_1", CourseUnitState.Active, "content_1", "Description_1", getProperties1()));
        lessonDataService.create(new Lesson("test_lesson_2", CourseUnitState.Active, "content_2", "Description_2", getProperties1()));
        lessonDataService.create(new Lesson("test_lesson_3", CourseUnitState.Active, "content_3", "Description_3", getProperties1()));
        lessonDataService.create(new Lesson("test_lesson_4", CourseUnitState.Active, "content_4", "Description_4", getProperties1()));
        lessonDataService.create(new Lesson("test_lesson_5", CourseUnitState.Active, "content_5", "Description_5", getProperties1()));

        List<Lesson> unusedLessons =  lessonDataService.detachedCopyAll(mTrainingService.getUnusedLessons());
        assertNotNull(unusedLessons);
        assertEquals(5, unusedLessons.size());
        assertEquals("test_lesson_3", unusedLessons.get(2).getName());

        List<Chapter> chapters = chapterDataService.detachedCopyAll(mTrainingService.getChaptersByName("unused_lessons_chapter1"));
        assertEquals(1, chapters.size());
        chapters.get(0).getLessons().add(unusedLessons.get(0));
        chapterDataService.update(chapters.get(0));

        unusedLessons = lessonDataService.detachedCopyAll(mTrainingService.getUnusedLessons());
        assertNotNull(unusedLessons);
        assertEquals(4, unusedLessons.size());

        chapters = chapterDataService.detachedCopyAll(mTrainingService.getChaptersByName("unused_lessons_chapter1"));
        chapters.get(0).getLessons().remove(0);
        chapterDataService.update(chapters.get(0));

        unusedLessons = lessonDataService.detachedCopyAll(mTrainingService.getUnusedLessons());
        assertNotNull(unusedLessons);
        assertEquals(5, unusedLessons.size());
    }

    @Test
    public void testGetUnusedQuizzes() {
        chapterDataService.create(new Chapter("unused_quizzes_chapter_1", CourseUnitState.Active, "content_1", "Description_1", getProperties2()));
        chapterDataService.create(new Chapter("unused_quizzes_chapter_2", CourseUnitState.Active, "content_2", "Description_2", getProperties2()));
        quizDataService.create(new Quiz("test_quiz_1", CourseUnitState.Active, "content_1", "Description_1", getProperties2()));
        quizDataService.create(new Quiz("test_quiz_2", CourseUnitState.Active, "content_2", "Description_2", getProperties2()));
        quizDataService.create(new Quiz("test_quiz_3", CourseUnitState.Active, "content_3", "Description_3", getProperties2()));

        List<Quiz> unusedQuizzes = quizDataService.detachedCopyAll(mTrainingService.getUnusedQuizzes());
        assertNotNull(unusedQuizzes);
        assertEquals(3, unusedQuizzes.size());

        List<Chapter> chapters = chapterDataService.detachedCopyAll(mTrainingService.getChaptersByName("unused_quizzes_chapter_1"));
        assertEquals(1, chapters.size());
        chapters.get(0).setQuiz(unusedQuizzes.get(0));
        chapterDataService.update(chapters.get(0));

        unusedQuizzes = quizDataService.detachedCopyAll(mTrainingService.getUnusedQuizzes());
        assertNotNull(unusedQuizzes);
        assertEquals(2, unusedQuizzes.size());

        chapters = chapterDataService.detachedCopyAll(mTrainingService.getChaptersByName("unused_quizzes_chapter_1"));
        assertEquals(1, chapters.size());
        chapters.get(0).setQuiz(null);
        chapterDataService.update(chapters.get(0));

        unusedQuizzes = quizDataService.detachedCopyAll(mTrainingService.getUnusedQuizzes());
        assertNotNull(unusedQuizzes);
        assertEquals(3, unusedQuizzes.size());
    }

    private Course generateFullCourse(String namePrefix) {
        Course myCourse = new Course(namePrefix, CourseUnitState.Active, "motech.com/courseIntro", "School course", getProperties1());
        Chapter chapter1 = new Chapter(namePrefix + "chapter1", CourseUnitState.Active, "motech.com/chapter1Intro", "Chapter 1 description", getProperties2());
        Chapter chapter2 = new Chapter(namePrefix + "chapter2", CourseUnitState.Active, "motech.com/chapter2Intro", "Chapter 2 description", getProperties3());

        Lesson lesson1 = new Lesson(namePrefix + "lesson1", CourseUnitState.Active, "motech.com/lesson1Intro", "Math lesson", getProperties1());
        Lesson lesson2 = new Lesson(namePrefix + "lesson2", CourseUnitState.Active, "motech.com/lesson2Intro", "English lesson", getProperties2());
        Lesson lesson3 = new Lesson(namePrefix + "lesson3", CourseUnitState.Active, "motech.com/lesson3Intro", "Geography lesson", getProperties3());

        Answer ans1 = new Answer("42");
        Answer ans2 = new Answer("Chuck Norris");
        Answer ans3 = new Answer("a");
        Answer ans4 = new Answer("b");
        Answer ans5 = new Answer("c");
        Answer ans6 = new Answer("d");
        Answer ans7 = new Answer("e");
        Answer ans8 = new Answer("f");

        Question q1 = new Question("Why do we exist?", new ArrayList<>(asList(ans1,ans5)));
        Question q2 = new Question("Who can never be sick?", new ArrayList<>(asList(ans2,ans6)));
        Question q3 = new Question("motech.com/question3.wav", new ArrayList<>(asList(ans3,ans7)));
        Question q4 = new Question("motech.com/question4.mp4", new ArrayList<>(asList(ans4,ans8)));

        Quiz quiz1 = new Quiz(namePrefix + "quiz1", CourseUnitState.Active, "RandomResourceLink", "Great Quiz", getProperties1(),
                new ArrayList<>(asList(q1, q2, q3, q4)), 90.9);

        chapter1.setLessons(new ArrayList<Lesson>(asList(lesson1, lesson2)));
        chapter1.setQuiz(quiz1);
        chapter2.setLessons(new ArrayList<Lesson>(asList(lesson3)));
        myCourse.setChapters(new ArrayList<Chapter>(asList(chapter1, chapter2)));

        return myCourse;
    }

    private Map<String, String> getProperties1() {
        Map<String, String> props = new HashMap<>();
        props.put("lang", "eng");
        props.put("sample", "");
        return props;
    }

    private Map<String, String> getProperties2() {
        Map<String, String> props = new HashMap<>();
        props.put("key_1", "value_1");
        props.put("key_2", "value_2");
        return props;
    }

    private Map<String, String> getProperties3() {
        Map<String, String> props = new HashMap<>();
        props.put("prop_1", "val_1");
        props.put("prop_2", "");
        return props;
    }

    private Map<String, String> getProperties4() {
        Map<String, String> props = new HashMap<>();
        props.put("key_3", "value_3");
        return props;
    }
}
