package org.motechproject.mtraining.service.it;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.motechproject.mtraining.domain.Chapter;
import org.motechproject.mtraining.domain.Course;
import org.motechproject.mtraining.domain.CourseUnitState;
import org.motechproject.mtraining.domain.Lesson;
import org.motechproject.mtraining.domain.Question;
import org.motechproject.mtraining.domain.Quiz;
import org.motechproject.mtraining.repository.ChapterDataService;
import org.motechproject.mtraining.repository.CourseDataService;
import org.motechproject.mtraining.service.MTrainingService;
import org.motechproject.testing.osgi.BasePaxIT;
import org.motechproject.testing.osgi.container.MotechNativeTestContainerFactory;
import org.ops4j.pax.exam.ExamFactory;
import org.ops4j.pax.exam.junit.PaxExam;
import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;
import org.ops4j.pax.exam.spi.reactors.PerSuite;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.TransactionCallback;
import org.springframework.transaction.support.TransactionCallbackWithoutResult;

import javax.inject.Inject;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

/**
 * Verify that mTrainingService is present and functional.
 */
@RunWith(PaxExam.class)
@ExamReactorStrategy(PerSuite.class)
@ExamFactory(MotechNativeTestContainerFactory.class)
public class MTrainingServiceBundleIT extends BasePaxIT {

    @Inject
    private MTrainingService mTrainingService;

    @Inject
    private ChapterDataService chapterDataService;

    @Inject
    private CourseDataService courseDataService;

    @Test
    public void testMTrainingServiceInstance() throws Exception {
        assertNotNull(mTrainingService);
    }

    @Test
    public void testCourseCreation() throws Exception {
        Course course = mTrainingService.createCourse(new Course("MyCourse", CourseUnitState.Active, "FooBar.com/ivr1"));
        assertNotNull(course);

        List<Course> saved = mTrainingService.getCourseByName("MyCourse");
        assertTrue(saved.size() > 0);
    }

    @Test
    public void testFullCourseCreation() throws Exception {
        Course testCourse = generateFullCourse("testFullCourseCreation");
        mTrainingService.createCourse(testCourse);
        List<Course> saved = mTrainingService.getCourseByName("testFullCourseCreation");
        assertTrue(saved.size() > 0);
    }

    @Test
    public void testAutoGeneratedFields() throws Exception {
        Course testCourse = generateFullCourse("testAutoGeneratedFields");
        assertNull(testCourse.getModificationDate());
        assertNull(testCourse.getCreationDate());
        mTrainingService.createCourse(testCourse);

        List<Course> saved = mTrainingService.getCourseByName("testAutoGeneratedFields");
        assertTrue(saved.size() > 0);
        Course returned = saved.get(0);
        assertNotNull(returned.getId());
        assertNotNull(returned.getCreationDate());
        assertNotNull(returned.getModificationDate());
    }

    @Test
    public void testCourseLookup() throws Exception {
        int courseCount = mTrainingService.getCourseByName("testCourseLookup").size();
        mTrainingService.createCourse(generateFullCourse("testCourseLookup"));
        List<Course> lookup = mTrainingService.getCourseByName("testCourseLookup");
        assertEquals(courseCount + 1, lookup.size());
    }

    @Test
    public void testCourseDeletion() throws Exception {
        int courseCount = mTrainingService.getCourseByName("testCourseDeletion").size();
        Course toDelete = mTrainingService.createCourse(generateFullCourse("testCourseDeletion"));
        List<Course> lookup = mTrainingService.getCourseByName("testCourseLookup");
        assertEquals(courseCount + 1, lookup.size());

        mTrainingService.deleteCourse(toDelete.getId());
        lookup = mTrainingService.getCourseByName("testCourseDeletion");
        assertEquals(courseCount, lookup.size());
    }

    @Test
    public void testSubChapterDeletion() throws Exception {
        // build course
        Course toAdd = generateFullCourse("testSubChapterDeletion");
        List<Chapter> existing = toAdd.getChapters();
        existing.add(new Chapter("subChapterToDelete", CourseUnitState.Active, "RandomContentLink"));
        toAdd.setChapters(existing);
        Course added = mTrainingService.createCourse(toAdd);
        Course lookup = mTrainingService.getCourseById(added.getId());
        assertNotNull(lookup);

        // verify chapter in course
        boolean found = false;
        long chapterId = -1;
        for (Chapter current : lookup.getChapters()) {
            if (current.getName() == "subChapterToDelete") {
                found = true;
                chapterId = current.getId();
            }
        }
        assertTrue(found);

        // delete chapter in course
        mTrainingService.deleteChapter(chapterId);

        // lookup course exists and verify that chapter was deleted
        lookup = mTrainingService.getCourseById(added.getId());
        assertNotNull(lookup);
        found = false;
        for (Chapter current : lookup.getChapters()) {
            if (current.getName() == "subChapterToDelete") {
                found = true;
                chapterId = current.getId();
            }
        }
        assertFalse(found);
    }

    @Test
    public void testCascadeSubUnitAccess() throws Exception {
        Course newCourse = mTrainingService.createCourse(generateFullCourse("testSubUnitCascadeDelete"));

        for(Chapter currentChapter : newCourse.getChapters()) {

            Quiz chapterQuiz = mTrainingService.getQuizForChapter(currentChapter.getId());
            if (chapterQuiz != null) {
                assertEquals(CourseUnitState.Active, chapterQuiz.getState());
            }

            for (Lesson currentLesson: currentChapter.getLessons()) {
                assertEquals(CourseUnitState.Active, currentLesson.getState());
            }
        }
        assertTrue(true);
    }

    @Test
    public void testSharedChapterCreation() throws Exception {
        Course firstCourse = mTrainingService.createCourse(generateFullCourse("testSharedChapter"));
        final long firstCourseId = firstCourse.getId();

        Course secondCourse = courseDataService.doInTransaction(new TransactionCallback<Course>() {
            @Override
            public Course doInTransaction(TransactionStatus transactionStatus) {
                Chapter sharedChapter = mTrainingService.getCourseById(firstCourseId).getChapters().get(0);
                return mTrainingService.createCourse(
                        new Course("secondCourse", CourseUnitState.Active, "RandomCourseIntro", Arrays.asList(sharedChapter)));
            }
        });

        assertNotNull(secondCourse);

        firstCourse = mTrainingService.getCourseById(firstCourseId);
        assertEquals(firstCourse.getChapters().size(), secondCourse.getChapters().size());
    }

    @Test
    public void testCourseChapterUpdate() throws Exception {
        final Course firstCourse = mTrainingService.createCourse(generateFullCourse("testSharedChapter"));
        final Chapter chapter = mTrainingService.getChapterById(firstCourse.getChapters().get(0).getId());

        chapterDataService.doInTransaction(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                Chapter chapterToUpdate = mTrainingService.getChapterById(chapter.getId());
                chapterToUpdate.setState(CourseUnitState.Inactive);
                mTrainingService.updateChapter(chapterToUpdate);
            }
        });

        Course updatedCourse = mTrainingService.getCourseById(firstCourse.getId());
        Chapter updatedChapter = mTrainingService.getChapterById(chapter.getId());

        assertEquals(updatedCourse.getChapters().get(0).getId(), updatedChapter.getId());
        assertEquals(updatedCourse.getChapters().get(0).getState(), updatedChapter.getState());
    }

    @Test
    public void testCourseUpdateStatus() throws Exception {
        final Course firstCourse = mTrainingService.createCourse(generateFullCourse("testCourseUpdateStatus"));
        assertEquals(firstCourse.getState(), CourseUnitState.Active);

        courseDataService.doInTransaction(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                Course courseToUpdate = mTrainingService.getCourseById(firstCourse.getId());
                courseToUpdate.setState(CourseUnitState.Inactive);
                mTrainingService.updateCourse(courseToUpdate);
            }
        });

        assertEquals(CourseUnitState.Inactive, mTrainingService.getCourseById(firstCourse.getId()).getState());
    }

    @Test
    public void testCourseUpdateAddChapter() throws Exception {
        final Course firstCourse = mTrainingService.createCourse(generateFullCourse("testCourseUpdateAddChapter"));
        assertEquals(2, firstCourse.getChapters().size());

        courseDataService.doInTransaction(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                Chapter newChapter = new Chapter("newChapter", CourseUnitState.Active, "newChapterContent", null, null);
                Course courseToUpdate = mTrainingService.getCourseById(firstCourse.getId());
                courseToUpdate.getChapters().add(newChapter);

                mTrainingService.updateCourse(courseToUpdate);
            }
        });

        assertEquals(3, mTrainingService.getCourseById(firstCourse.getId()).getChapters().size());
    }

    @Test
    public void testChapterCreation() throws Exception {
        Chapter newChapter = generateFullCourse("testChapterCreation").getChapters().get(0);
        newChapter.setName("MyFooBarChapter");
        newChapter = mTrainingService.createChapter(newChapter);

        assertNotNull(newChapter);
        assertTrue(mTrainingService.getCourseByName("testChapterCreation").size() == 0);
        assertTrue(mTrainingService.getChapterByName("MyFooBarChapter").size() > 0);
    }

    @Test
    public void testChapterUpdate() throws Exception {
        Chapter newChapter = generateFullCourse("testChapterUpdate").getChapters().get(0);
        newChapter.setName("testChapterUpdate-Chapter");
        newChapter = mTrainingService.createChapter(newChapter);
        final long newChapterId = newChapter.getId();

        assertNotNull(newChapter);
        assertEquals("testChapterUpdate-Chapter", newChapter.getName());

        chapterDataService.doInTransaction(new TransactionCallbackWithoutResult() {
            @Override
            protected void doInTransactionWithoutResult(TransactionStatus transactionStatus) {
                Chapter chapterToUpdate = mTrainingService.getChapterById(newChapterId);
                chapterToUpdate.setName("testChapterUpdate-Chapter-Update");
                mTrainingService.updateChapter(chapterToUpdate);
            }
        });

        assertEquals("testChapterUpdate-Chapter-Update", mTrainingService.getChapterById(newChapterId).getName());
    }

    @Test
    public void testChapterQuiz() throws Exception {
        Chapter newChapter = generateFullCourse("testChapterQuiz").getChapters().get(0);
        newChapter = mTrainingService.createChapter(newChapter);

        assertNotNull(newChapter);
        Quiz storedQuiz = mTrainingService.getQuizForChapter(newChapter.getId());
        assertNotNull(storedQuiz);
        assertEquals(storedQuiz.getName(), newChapter.getQuiz().getName());
        assertEquals(4, storedQuiz.getQuestions().size());

        for (Question question : storedQuiz.getQuestions()) {
            assertNotNull(question);
        }
    }

    private Course generateFullCourse(String namePrefix) {
        Course myCourse = new Course(namePrefix, CourseUnitState.Active, "motech.com/courseIntro");
        Chapter chapter1 = new Chapter(namePrefix + "chapter1", CourseUnitState.Active, "motech.com/chapter1Intro");
        Chapter chapter2 = new Chapter(namePrefix + "chapter2", CourseUnitState.Active, "motech.com/chapter2Intro");

        Lesson lesson1 = new Lesson(namePrefix + "lesson1", CourseUnitState.Active, "motech.com/lesson1Intro");
        Lesson lesson2 = new Lesson(namePrefix + "lesson2", CourseUnitState.Active, "motech.com/lesson2Intro");
        Lesson lesson3 = new Lesson(namePrefix + "lesson3", CourseUnitState.Active, "motech.com/lesson3Intro");

        Question q1 = new Question("Why do we exist?", "42");
        Question q2 = new Question("Who can never be sick?", "Chuck Norris");
        Question q3 = new Question("motech.com/question3.wav", "b");
        Question q4 = new Question("motech.com/question4.mp4", "a");

        Quiz quiz1 = new Quiz(namePrefix + "quiz1", CourseUnitState.Active, "RandomResourceLink", new ArrayList<>(Arrays.asList(q1, q2, q3, q4)), 90.9);

        chapter1.setLessons(new ArrayList<Lesson>(Arrays.asList(lesson1, lesson2)));
        chapter1.setQuiz(quiz1);
        chapter2.setLessons(new ArrayList<Lesson>(Arrays.asList(lesson3)));
        myCourse.setChapters(new ArrayList<Chapter>(Arrays.asList(chapter1, chapter2)));

        return myCourse;
    }
}
